#include "cs.h"
#include "gpio.h"
#include "wdt_a.h"
#include "pmm.h"

#include "Board.h"
#include "UART.h"
#include "SPI.h"
#include "MAX11254.h"

#define MCLK_FREQ_KHZ 24000
#define MCLK_FLLREF_RATIO 732   // 32.768kHz * 732 = 24MHz

#define CHANNEL_COUNT   5

uint8_t string[30] = {0};

int32_t adc_data[5] = {0};
uint8_t adc_rate = RATE_2;
uint8_t adc_channel = 0;

commandState command_state = COMMAND_IDLE;
readState read_state = READ_INITIATE_READ;
bool silent = false;

void init_clocks();
void read_adc_command();
void initiate_adc_read();
void get_adc_data();
void parse_command();
void update_adc_data();

void itoa(int32_t value, uint8_t* result, int base);
bool strings_equal(uint8_t *str1, uint8_t *str2, int length);

int main(void) {
    WDT_A_hold(WDT_A_BASE);
    PMM_unlockLPM5();

    init_clocks();
    UART_init();
    SPI_init(true, false, true, SPI_CLK_FREQ, true);
    MAX11254_init_gpio();
    GPIO_selectInterruptEdge(
            GPIO_PORT_RDYB,
            GPIO_PIN_RDYB,
            GPIO_HIGH_TO_LOW_TRANSITION
    );


    MAX11254_enter_seq_mode1(false, 64, adc_rate);
    GPIO_clearInterrupt(GPIO_PORT_RDYB, GPIO_PIN_RDYB);
    GPIO_enableInterrupt(GPIO_PORT_RDYB, GPIO_PIN_RDYB);
   /* while (1) {
        switch (current_state) {
        case COMMAND_IDLE: break;
        case READ_ADC_RAW:

            break;
        }
        if (UART_receive_count) {
            int count = UART_receive_count;
            UART_receive_bytes(string);
            UART_transmit_bytes(string, count, false);
        }

        __no_operation();

    }*/
    for (;;) {
        switch (command_state) {
            case COMMAND_IDLE: break;
            case COMMAND_READ_ADC:
                read_adc_command();
                break;
            case COMMAND_SET_RATE: break;
            case COMMAND_RECEIVE:
                if (UART_receive_buffer[UART_receive_count-1] == '\r') {
                    parse_command();
                } else if (UART_receive_count == UART_RECEIVE_BUF_SIZE) {
                    UART_receive_bytes(string);
                } else {
                    command_state = COMMAND_IDLE;
                }
                break;

            default: break;
        }

        switch (read_state) {
            case READ_IDLE: break;
            case READ_INITIATE_READ:
                initiate_adc_read();
                break;
            case READ_GET_DATA:
                get_adc_data();
                break;
            default: break;
        }
    }
    return (0);
}

void init_clocks() {
    CS_initClockSignal(
          CS_FLLREF,         // The reference for Frequency Locked Loop
          CS_REFOCLK_SELECT,  // Select REFOCLK
          CS_CLOCK_DIVIDER_1 // The FLL reference will be 32.768KHz
    );

    CS_initFLLSettle(
            MCLK_FREQ_KHZ,
            MCLK_FLLREF_RATIO
    );

    //Set ACLK = REFOCLK with clock divider of 1,  32.768kHz
    CS_initClockSignal(CS_ACLK,CS_REFOCLK_SELECT,CS_CLOCK_DIVIDER_1);
    //Set SMCLK = DCO with frequency divider of 2, 12MHz
    CS_initClockSignal(CS_SMCLK,CS_DCOCLKDIV_SELECT,CS_CLOCK_DIVIDER_2);
    //Set MCLK = DCO with frequency divider of 2, 24MHz
    CS_initClockSignal(CS_MCLK,CS_DCOCLKDIV_SELECT,CS_CLOCK_DIVIDER_1);

}


void parse_command() {
    UART_receive_bytes(string);
    if (strings_equal("read_adc\r", string, 8) {
        command_state = COMMAND_READ_ADC;

    } else if (strings_equal("set_rate", string, 8) {
        if (string[8] == ' ') {
            command_state = COMMAND_SET_RATE;
        } else if ()

    }else {
        command_state = COMMAND_IDLE;
    }
}

void read_adc_command() {
    int i;
    UART_transmit_bytes("ADC Readings:\r\n", 15, false);
    for (i = 0; i < 5; i++) {
        UART_transmit_bytes("\tChannel ", 9, false);
        itoa((int32_t) i, string, 10);
        UART_transmit_bytes(string, 1, false);
        UART_transmit_bytes(": ", 2, false);

        itoa(adc_data[i], string, 10);
        int k = 0;
        while (string[k] != '\0') k++;
        UART_transmit_bytes(string, k-1, false);
        UART_transmit_bytes("\r\n", 2, false);
    }
    command_state = COMMAND_IDLE;
}

void initiate_adc_read() {
    MAX11254_select_channel(adc_channel);
    MAX11254_conversion_command(adc_rate);
    read_state = READ_IDLE;
}

void get_adc_data() {
    adc_data[adc_channel] = MAX11254_get_raw_data(adc_channel);
    if (adc_channel == CHANNEL_COUNT - 1) {
        adc_channel = CHANNEL_0;
        command_state = COMMAND_READ_ADC;
    } else {
        adc_channel++;
    }
    read_state = READ_INITIATE_READ;
}

void update_adc_data() {
    uint8_t i;
    for (i = 0; i < 5; i++) {
        adc_data[i] = MAX11254_mode1_read(i, adc_rate);
    }
}

bool strings_equal(uint8_t *str1, uint8_t *str2, int length) {
    int i;
    for (i = 0; i < length; i++) {
        if (str1[i] != str2[i]) return false;
    }
    return true;
}

void itoa(int32_t value, uint8_t* result, int base) {
  // check that the base if valid
  if (base < 2 || base > 36) { *result = '\0';}

  uint8_t* ptr = result, *ptr1 = result, tmp_char;
  int tmp_value;

  do {
    tmp_value = value;
    value /= base;
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
  } while ( value );

  // Apply negative sign
  if (tmp_value < 0) *ptr++ = '-';
  *ptr-- = '\0';
  while(ptr1 < ptr) {
    tmp_char = *ptr;
    *ptr--= *ptr1;
    *ptr1++ = tmp_char;
  }

}

#pragma vector=PORT3_VECTOR
__interrupt void port3_isr(void) {
    switch(__even_in_range(P3IV, BIT6)) {
        case 0x0E:
            read_state = READ_GET_DATA;
            GPIO_clearInterrupt(GPIO_PORT_RDYB, GPIO_PIN_RDYB);
            break;
    }
}

